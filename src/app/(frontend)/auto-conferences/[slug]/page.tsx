'use server';

import config from "@payload-config";
import { notFound, redirect } from "next/navigation";
import { getPayload } from "payload";
import isPageCanBeAccessed from "@/utilities/protectPageUtils";

type Props = {
    params: Promise<{
        slug: string
    }>
}

// Helper function to convert slug to title format
function slugToTitle(slug: string): string {
    return slug
        .split('-')
        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
        .join(' ');
}

// Helper function to format date according to the dateFormat
function formatDateWithFormat(dateFormat: string): string {
    const now = new Date();
    // Simple date formatting - can be extended with more complex logic
    return dateFormat.replace(/YYYY/g, now.getFullYear().toString())
                    .replace(/MM/g, (now.getMonth() + 1).toString().padStart(2, '0'))
                    .replace(/DD/g, now.getDate().toString().padStart(2, '0'))
                    .replace(/HH/g, now.getHours().toString().padStart(2, '0'))
                    .replace(/mm/g, now.getMinutes().toString().padStart(2, '0'));
}

export default async function AutoGeneratedConference(props: Props) {
    if (!(await isPageCanBeAccessed())) {
        redirect("/auth");
    }

    const payload = await getPayload({ config });
    const { slug } = await props.params;

    // Query auto-generated conference by slug
    const autoGenConferenceResult = await payload.find({
        collection: 'auto-generated-conferences',
        where: {
            slug: {
                equals: slug
            }
        },
        limit: 1
    });

    // Return 404 if auto-generated conference not found
    if (autoGenConferenceResult.docs.length === 0) {
        notFound();
    }

    const autoGenConference = autoGenConferenceResult.docs[0];
    
    // Format the date according to the dateFormat
    const formattedDate = formatDateWithFormat(autoGenConference.dateFormat);
    
    // Create the conference slug format: {slug-auto-generated-conference}-{formatted-date}
    const conferenceSlug = `${slug}-${formattedDate}`;
    
    // Create the title: convert slug to Camel case, replace - with space, and add formatted date
    const conferenceTitle = `${slugToTitle(slug)} ${formattedDate}`;

    // Check if conference with this slug already exists
    const existingConferenceResult = await payload.find({
        collection: 'conferences',
        where: {
            slug: {
                equals: conferenceSlug
            }
        },
        limit: 1
    });

    if (existingConferenceResult.docs.length > 0) {
        // Conference already exists, redirect to /conferences/{slug}/question
        redirect(`/conferences/${conferenceSlug}/question`);
    }

    // Create new conference using the user from the auto-generated conference template
    await payload.create({
        collection: 'conferences',
        data: {
            title: conferenceTitle,
            slug: conferenceSlug,
            description: '',
            user: autoGenConference.user
        }
    });

    // Redirect to /conferences/{slug}/question
    redirect(`/conferences/${conferenceSlug}/question`);
}