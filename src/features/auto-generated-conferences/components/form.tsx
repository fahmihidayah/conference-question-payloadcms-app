'use client';
import React from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { useState } from "react";

import { autoGeneratedConferenceFormSchema, AutoGeneratedConferenceFormSchema } from "../type";
import { createAutoGeneratedConferenceAction } from "../actions";
import { useRouter } from "next/navigation";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";

export const AutoGeneratedConferenceForm: React.FC = () => {
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [submitError, setSubmitError] = useState<string | null>(null);
    const router = useRouter();
    const {
        register,
        handleSubmit,
        formState: { errors },
        reset
    } = useForm<AutoGeneratedConferenceFormSchema>({
        resolver: zodResolver(autoGeneratedConferenceFormSchema),
        defaultValues: {
            title: "",
            description: "",
            dateFormat: ""
        }
    });

    const onSubmit = async (data: AutoGeneratedConferenceFormSchema) => {
        setIsSubmitting(true);
        setSubmitError(null);
        try {
            await createAutoGeneratedConferenceAction(data);
            router.push("/auto-conferences");
            reset();
        } catch (error) {
            console.error("Pembuatan konferensi otomatis gagal:", error);
            setSubmitError(error instanceof Error ? error.message : "Terjadi kesalahan saat membuat konferensi");
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <div className="min-h-screen bg-white p-4">
            <div className="w-full">
                {/* Header */}
                <div className="text-center mb-8">
                    <h1 className="text-3xl font-bold text-gray-900 mb-2">Buat Konferensi Otomatis</h1>
                    <p className="text-gray-600">Tambahkan konferensi otomatis baru</p>
                </div>

                {/* Error Message */}
                {submitError && (
                    <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
                        <p className="text-red-700 text-sm">{submitError}</p>
                    </div>
                )}

                {/* Form */}
                <div className="space-y-6">
                    {/* Title Field */}
                    <Input
                        {...register("title")}
                        type="text"
                        label="Judul Konferensi"
                        placeholder="Masukkan judul konferensi"
                        error={errors.title?.message}
                        required
                    />

                    {/* Description Field */}
                    <div>
                        <label 
                            htmlFor="description" 
                            className="block text-sm font-medium text-gray-700 mb-2"
                        >
                            Deskripsi
                            <span className="text-gray-500 text-xs ml-1">(opsional)</span>
                        </label>
                        <textarea
                            {...register("description")}
                            id="description"
                            rows={4}
                            className={`text-black flex w-full rounded-lg border px-4 py-3 text-base transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:bg-gray-50 disabled:cursor-not-allowed disabled:opacity-50 placeholder:text-gray-400 touch-manipulation ${
                                errors.description 
                                    ? 'border-red-300 focus:ring-red-500 focus:border-red-500' 
                                    : 'border-gray-300 hover:border-gray-400 focus:border-blue-500'
                            }`}
                            placeholder="Masukkan deskripsi konferensi (opsional)"
                            style={{
                                WebkitTapHighlightColor: 'transparent',
                                touchAction: 'manipulation'
                            }}
                        />
                        {errors.description && (
                            <p className="mt-2 text-sm text-red-600">
                                {errors.description.message}
                            </p>
                        )}
                    </div>

                    {/* Date Format Field */}
                    <Input
                        {...register("dateFormat")}
                        type="text"
                        label="Format Tanggal"
                        placeholder="Contoh: 25-12-2024 atau 12-2024"
                        error={errors.dateFormat?.message}
                        required
                        helperText="Gunakan format DD-MM-YYYY (contoh: 25-12-2024) atau MM-YYYY (contoh: 12-2024)"
                    />

                    {/* Submit Button */}
                    <Button
                        onClick={handleSubmit(onSubmit)}
                        disabled={isSubmitting}
                        loading={isSubmitting}
                        loadingText="Membuat Konferensi..."
                        variant="primary"
                        size="default"
                    >
                        Buat Konferensi Otomatis
                    </Button>
                </div>
            </div>
        </div>
    );
};

export default AutoGeneratedConferenceForm;